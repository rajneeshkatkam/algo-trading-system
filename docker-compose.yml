version: '3.8'

services:
  # Database Services
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: algo-timescaledb
    environment:
      POSTGRES_DB: algotrading
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-db:/docker-entrypoint-initdb.d
    networks:
      - algo-network

  redis:
    image: redis:7-alpine
    container_name: algo-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - algo-network

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: algo-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - algo-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: algo-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - algo-network

  # Core Services (will be built from source)
  market-data-service:
    build:
      context: ./services/market-data-service
      dockerfile: Dockerfile
    container_name: algo-market-data
    ports:
      - "8080:8080"
      - "8081:8081"  # gRPC
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: algotrading
      DB_USER: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
    depends_on:
      - timescaledb
      - redis
      - kafka
    networks:
      - algo-network
    # Uncomment when service is ready
    # profiles:
    #   - services

  trading-engine:
    build:
      context: ./services/trading-engine
      dockerfile: Dockerfile
    container_name: algo-trading-engine
    ports:
      - "8082:8080"
      - "8083:8081"  # gRPC
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: algotrading
      DB_USER: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:9092
      MARKET_DATA_SERVICE: market-data-service:8081
    depends_on:
      - timescaledb
      - redis
      - kafka
      - market-data-service
    networks:
      - algo-network
    # profiles:
    #   - services

  ml-service:
    build:
      context: ./services/ml-service
      dockerfile: Dockerfile
    container_name: algo-ml-service
    ports:
      - "8084:8000"
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: algotrading
      DB_USER: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - timescaledb
      - redis
    volumes:
      - ./services/ml-service/models:/app/models
    networks:
      - algo-network
    # profiles:
    #   - services

  sentiment-analysis:
    build:
      context: ./services/sentiment-analysis
      dockerfile: Dockerfile
    container_name: algo-sentiment-analysis
    ports:
      - "8085:8000"
    environment:
      DB_HOST: timescaledb
      DB_PORT: 5432
      DB_NAME: algotrading
      DB_USER: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - timescaledb
      - redis
    networks:
      - algo-network
    # profiles:
    #   - services

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: algo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - algo-network

  grafana:
    image: grafana/grafana:latest
    container_name: algo-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana:/etc/grafana/provisioning
    networks:
      - algo-network

  # Development Tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: algo-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@algo.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - algo-network
    profiles:
      - dev

volumes:
  timescaledb_data:
  redis_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  algo-network:
    driver: bridge
